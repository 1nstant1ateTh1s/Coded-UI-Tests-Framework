// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace FDACodedUITests_Framework.UIMaps.DocumentLibrariesPageUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class DocumentLibrariesPageUIMap
    {
        
        /// <summary>
        /// Verify the item was added to the Document Library
        /// </summary>
        public void AssertItemAddedToLibrary()
        {
            #region Variable Declarations
            HtmlRow itemRow = this.DocumentLibraryBrowser.DocumentLibraryPage.DocumentLibraryListViewTable.ItemRow;
            #endregion

            // Verify that the 'Exists' property of 'Item' row equals 'True'
            Assert.AreEqual(this.AssertItemAddedToLibraryExpectedValues.ItemRowExists, itemRow.Exists, "Item not added to Document Library");
        }
        
        /// <summary>
        /// Deletes document from Document Library
        /// </summary>
        public void DeleteDocument()
        {
            #region Variable Declarations
            HtmlDiv listItemPane = this.DocumentLibraryBrowser.DocumentLibraryPage.DocumentLibraryListViewTable.ListItemPane;
            HtmlHyperlink deleteDocumentHyperlink = this.DocumentLibraryBrowser.DocumentLibraryPage.DeleteDocumentHyperlink;
            BrowserWindow uISharedDocumentsAllDoWindow = this.UISharedDocumentsAllDoWindow;
            #endregion

            // Click 'List Item' pane
            Mouse.Click(listItemPane, new Point(192, 10));

            // Click 'Delete Document' link
            Mouse.Click(deleteDocumentHyperlink, new Point(72, 12));

            // Click 'Ok' button in the browser dialog window
            uISharedDocumentsAllDoWindow.PerformDialogAction(BrowserDialogAction.Ok);
        }
        
        /// <summary>
        /// Uploads a document to the Document Library
        /// </summary>
        public void UploadDocument()
        {
            #region Variable Declarations
            HtmlHyperlink libraryToolsDocumentsTabHyperlink = this.DocumentLibraryBrowser.DocumentLibraryPage.LibraryToolsDocumentsTabHyperlink;
            HtmlImage uploadDocumentImage = this.DocumentLibraryBrowser.DocumentLibraryPage.UploadDocumentBtnPane.UploadDocumentImage;
            HtmlFileInput nameFileInput = this.DocumentLibraryBrowser.UploadDocumentFrame.UploadDocumentPage.NameFileInput;
            HtmlInputButton oKButton = this.DocumentLibraryBrowser.UploadDocumentFrame.UploadDocumentPage.OKButton;
            #endregion

            // Click 'Documents Library Tools group. Tab 1 of 2.' link
            Mouse.Click(libraryToolsDocumentsTabHyperlink, new Point(48, 9));

            // Click 'Upload Document' image
            Mouse.Click(uploadDocumentImage, new Point(16, 53));

            // Type 'C:\Users\Andrew.Brown\Documents\TESTING\Test Files\TEST WORD DOCUMENT.docx' in 'Name:' file input
            nameFileInput.FileName = this.UploadDocumentParams.NameFileInputFileName;

            // Click 'OK' button
            Mouse.Click(oKButton, new Point(66, 15));
        }
        
        #region Properties
        public virtual AssertItemAddedToLibraryExpectedValues AssertItemAddedToLibraryExpectedValues
        {
            get
            {
                if ((this.mAssertItemAddedToLibraryExpectedValues == null))
                {
                    this.mAssertItemAddedToLibraryExpectedValues = new AssertItemAddedToLibraryExpectedValues();
                }
                return this.mAssertItemAddedToLibraryExpectedValues;
            }
        }
        
        public virtual UploadDocumentParams UploadDocumentParams
        {
            get
            {
                if ((this.mUploadDocumentParams == null))
                {
                    this.mUploadDocumentParams = new UploadDocumentParams();
                }
                return this.mUploadDocumentParams;
            }
        }
        
        public DocumentLibraryBrowser DocumentLibraryBrowser
        {
            get
            {
                if ((this.mDocumentLibraryBrowser == null))
                {
                    this.mDocumentLibraryBrowser = new DocumentLibraryBrowser();
                }
                return this.mDocumentLibraryBrowser;
            }
        }
        
        public UISharedDocumentsAllDoWindow UISharedDocumentsAllDoWindow
        {
            get
            {
                if ((this.mUISharedDocumentsAllDoWindow == null))
                {
                    this.mUISharedDocumentsAllDoWindow = new UISharedDocumentsAllDoWindow();
                }
                return this.mUISharedDocumentsAllDoWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertItemAddedToLibraryExpectedValues mAssertItemAddedToLibraryExpectedValues;
        
        private UploadDocumentParams mUploadDocumentParams;
        
        private DocumentLibraryBrowser mDocumentLibraryBrowser;
        
        private UISharedDocumentsAllDoWindow mUISharedDocumentsAllDoWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertItemAddedToLibrary'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertItemAddedToLibraryExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of 'Item' row equals 'True'
        /// </summary>
        public bool ItemRowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UploadDocument'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UploadDocumentParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'C:\Users\Andrew.Brown\Documents\TESTING\Test Files\TEST WORD DOCUMENT.docx' in 'Name:' file input
        /// </summary>
        public string NameFileInputFileName = "C:\\Users\\Andrew.Brown\\Documents\\TESTING\\Test Files\\TEST WORD DOCUMENT.docx";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DocumentLibraryBrowser : BrowserWindow
    {
        
        public DocumentLibraryBrowser()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("New Library TEST - All Documents");
            this.WindowTitles.Add("Document Library Settings");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public DocumentLibraryPage DocumentLibraryPage
        {
            get
            {
                if ((this.mDocumentLibraryPage == null))
                {
                    this.mDocumentLibraryPage = new DocumentLibraryPage(this);
                }
                return this.mDocumentLibraryPage;
            }
        }
        
        public DocumentLibrarySettingsPage DocumentLibrarySettingsPage
        {
            get
            {
                if ((this.mDocumentLibrarySettingsPage == null))
                {
                    this.mDocumentLibrarySettingsPage = new DocumentLibrarySettingsPage(this);
                }
                return this.mDocumentLibrarySettingsPage;
            }
        }
        
        public UploadDocumentFrame UploadDocumentFrame
        {
            get
            {
                if ((this.mUploadDocumentFrame == null))
                {
                    this.mUploadDocumentFrame = new UploadDocumentFrame(this);
                }
                return this.mUploadDocumentFrame;
            }
        }
        #endregion
        
        #region Fields
        private DocumentLibraryPage mDocumentLibraryPage;
        
        private DocumentLibrarySettingsPage mDocumentLibrarySettingsPage;
        
        private UploadDocumentFrame mUploadDocumentFrame;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DocumentLibraryPage : HtmlDocument
    {
        
        public DocumentLibraryPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "New Library TEST - All Documents";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/New%20Library%20TEST/Forms/AllItems.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://sharepoint.preprod.fda.gov/New%20Library%20TEST/Forms/AllItems.aspx?Initia" +
                "lTabId=Ribbon.Library&VisibilityContext=WSSListAndLibrary";
            this.WindowTitles.Add("New Library TEST - All Documents");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink LibrarySettingsHyperlink
        {
            get
            {
                if ((this.mLibrarySettingsHyperlink == null))
                {
                    this.mLibrarySettingsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mLibrarySettingsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "Ribbon.Library.Settings.DocumentLibrarySettings-Large";
                    this.mLibrarySettingsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mLibrarySettingsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mLibrarySettingsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Library\r\nSettings";
                    this.mLibrarySettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = ";";
                    this.mLibrarySettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mLibrarySettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:;";
                    this.mLibrarySettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ms-cui-ctl-large";
                    this.mLibrarySettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=Ribbon.Library.Settings.DocumentLibra";
                    this.mLibrarySettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "43";
                    this.mLibrarySettingsHyperlink.WindowTitles.Add("New Library TEST - All Documents");
                    #endregion
                }
                return this.mLibrarySettingsHyperlink;
            }
        }
        
        public DocumentLibraryListViewTable DocumentLibraryListViewTable
        {
            get
            {
                if ((this.mDocumentLibraryListViewTable == null))
                {
                    this.mDocumentLibraryListViewTable = new DocumentLibraryListViewTable(this);
                }
                return this.mDocumentLibraryListViewTable;
            }
        }
        
        public UploadDocumentBtnPane UploadDocumentBtnPane
        {
            get
            {
                if ((this.mUploadDocumentBtnPane == null))
                {
                    this.mUploadDocumentBtnPane = new UploadDocumentBtnPane(this);
                }
                return this.mUploadDocumentBtnPane;
            }
        }
        
        public HtmlHyperlink LibraryToolsDocumentsTabHyperlink
        {
            get
            {
                if ((this.mLibraryToolsDocumentsTabHyperlink == null))
                {
                    this.mLibraryToolsDocumentsTabHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mLibraryToolsDocumentsTabHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mLibraryToolsDocumentsTabHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mLibraryToolsDocumentsTabHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mLibraryToolsDocumentsTabHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "\r\nDocuments\r\nLibrary Tools group. Tab 1 of 2.";
                    this.mLibraryToolsDocumentsTabHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = ";";
                    this.mLibraryToolsDocumentsTabHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = "Documents";
                    this.mLibraryToolsDocumentsTabHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:;";
                    this.mLibraryToolsDocumentsTabHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ms-cui-tt-a";
                    this.mLibraryToolsDocumentsTabHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=ms-cui-tt-a title=Documents onclic";
                    this.mLibraryToolsDocumentsTabHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mLibraryToolsDocumentsTabHyperlink.WindowTitles.Add("Shared Documents - All Documents");
                    #endregion
                }
                return this.mLibraryToolsDocumentsTabHyperlink;
            }
        }
        
        public HtmlHyperlink DeleteDocumentHyperlink
        {
            get
            {
                if ((this.mDeleteDocumentHyperlink == null))
                {
                    this.mDeleteDocumentHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mDeleteDocumentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "Ribbon.Documents.Manage.Delete-Medium";
                    this.mDeleteDocumentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mDeleteDocumentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mDeleteDocumentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete Document";
                    this.mDeleteDocumentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = ";";
                    this.mDeleteDocumentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mDeleteDocumentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:;";
                    this.mDeleteDocumentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ms-cui-ctl-medium ";
                    this.mDeleteDocumentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=Ribbon.Documents.Manage.Delete-Medium";
                    this.mDeleteDocumentHyperlink.WindowTitles.Add("Shared Documents - All Documents");
                    #endregion
                }
                return this.mDeleteDocumentHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mLibrarySettingsHyperlink;
        
        private DocumentLibraryListViewTable mDocumentLibraryListViewTable;
        
        private UploadDocumentBtnPane mUploadDocumentBtnPane;
        
        private HtmlHyperlink mLibraryToolsDocumentsTabHyperlink;
        
        private HtmlHyperlink mDeleteDocumentHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DocumentLibraryListViewTable : HtmlTable
    {
        
        public DocumentLibraryListViewTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "onetidDoclibViewTbl0";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Type  Name  Modified  Modified By\r\n  \r\nN";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "dir=none id=onetidDoclibViewTbl0 class=m";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "ms-listviewtable";
            this.WindowTitles.Add("Shared Documents - All Documents");
            #endregion
        }
        
        #region Properties
        public HtmlRow ItemRow
        {
            get
            {
                if ((this.mItemRow == null))
                {
                    this.mItemRow = new HtmlRow(this);
                    #region Search Criteria
                    this.mItemRow.SearchProperties[HtmlRow.PropertyNames.MaxDepth] = "2";
                    this.mItemRow.FilterProperties[HtmlRow.PropertyNames.Class] = "ms-itmhover";
                    this.mItemRow.FilterProperties[HtmlRow.PropertyNames.Title] = "TEST WORD DOCUMENT";
                    this.mItemRow.FilterProperties.Add(new PropertyExpression(HtmlRow.PropertyNames.InnerText, "TEST WORD DOCUMENT", PropertyExpressionOperator.Contains));
                    this.mItemRow.WindowTitles.Add("Shared Documents - All Documents");
                    #endregion
                }
                return this.mItemRow;
            }
        }
        
        public HtmlDiv ListItemPane
        {
            get
            {
                if ((this.mListItemPane == null))
                {
                    this.mListItemPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mListItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mListItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "TEST WORD DOCUMENT";
                    this.mListItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mListItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "ms-vb itx";
                    this.mListItemPane.WindowTitles.Add("Shared Documents - All Documents");
                    #endregion
                }
                return this.mListItemPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlRow mItemRow;
        
        private HtmlDiv mListItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UploadDocumentBtnPane : HtmlSpan
    {
        
        public UploadDocumentBtnPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "Ribbon.Documents.New.AddDocument-Large";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Upload DocumentUpload\r\nDocument ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "ms-cui-ctl-large ";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=Ribbon.Documents.New.AddDocument-Larg";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "41";
            this.WindowTitles.Add("Shared Documents - All Documents");
            #endregion
        }
        
        #region Properties
        public HtmlImage UploadDocumentImage
        {
            get
            {
                if ((this.mUploadDocumentImage == null))
                {
                    this.mUploadDocumentImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUploadDocumentImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUploadDocumentImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUploadDocumentImage.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUploadDocumentImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/_layouts/1033/images/formatmap32x32.png";
                    this.mUploadDocumentImage.FilterProperties[HtmlImage.PropertyNames.Src] = "http://sharepoint.preprod.fda.gov/_layouts/1033/images/formatmap32x32.png";
                    this.mUploadDocumentImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = ";";
                    this.mUploadDocumentImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:;";
                    this.mUploadDocumentImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUploadDocumentImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"TOP: -32px; LEFT: 0px\" alt=\"\" src";
                    this.mUploadDocumentImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    this.mUploadDocumentImage.WindowTitles.Add("Shared Documents - All Documents");
                    #endregion
                }
                return this.mUploadDocumentImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUploadDocumentImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class DocumentLibrarySettingsPage : HtmlDocument
    {
        
        public DocumentLibrarySettingsPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Document Library Settings";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/_layouts/listedit.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://sharepoint.preprod.fda.gov/_layouts/listedit.aspx?List=%7B9DF781D9%2D1086%" +
                "2D49E8%2D84BE%2D87649739ADC1%7D";
            this.WindowTitles.Add("Document Library Settings");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink DeleteThisDocumentLibraryHyperlink
        {
            get
            {
                if ((this.mDeleteThisDocumentLibraryHyperlink == null))
                {
                    this.mDeleteThisDocumentLibraryHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mDeleteThisDocumentLibraryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "ctl00_PlaceHolderMain_ctl09_RptControls_onetidListEdit2";
                    this.mDeleteThisDocumentLibraryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mDeleteThisDocumentLibraryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mDeleteThisDocumentLibraryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete this document library";
                    this.mDeleteThisDocumentLibraryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "DeleteList()";
                    this.mDeleteThisDocumentLibraryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mDeleteThisDocumentLibraryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:DeleteList()";
                    this.mDeleteThisDocumentLibraryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mDeleteThisDocumentLibraryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=ctl00_PlaceHolderMain_ctl09_RptContro";
                    this.mDeleteThisDocumentLibraryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "63";
                    this.mDeleteThisDocumentLibraryHyperlink.WindowTitles.Add("Document Library Settings");
                    #endregion
                }
                return this.mDeleteThisDocumentLibraryHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mDeleteThisDocumentLibraryHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UploadDocumentFrame : HtmlIFrame
    {
        
        public UploadDocumentFrame(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlFrame.PropertyNames.Name] = null;
            this.FilterProperties[HtmlFrame.PropertyNames.AbsolutePath] = "/_layouts/Upload.aspx";
            this.FilterProperties[HtmlFrame.PropertyNames.PageUrl] = "/_layouts/Upload.aspx?List=%7BE6CFE9AB%2D2F76%2D4A52%2D9E74%2DECC54B9DDA69%7D&Roo" +
                "tFolder=%2FShared%20Documents&Source=http%3A%2F%2Fsharepoint%2Epreprod%2Efda%2Eg" +
                "ov%2FShared%20Documents%2FForms%2FAllItems%2Easpx&IsDlg=1";
            this.FilterProperties[HtmlFrame.PropertyNames.Title] = null;
            this.FilterProperties[HtmlFrame.PropertyNames.Class] = "ms-dlgFrame";
            this.FilterProperties[HtmlFrame.PropertyNames.ControlDefinition] = "style=\"WIDTH: 601px; HEIGHT: 393px\" id=D";
            this.FilterProperties[HtmlFrame.PropertyNames.TagInstance] = "4";
            this.WindowTitles.Add("Shared Documents - All Documents");
            #endregion
        }
        
        #region Properties
        public UploadDocumentPage UploadDocumentPage
        {
            get
            {
                if ((this.mUploadDocumentPage == null))
                {
                    this.mUploadDocumentPage = new UploadDocumentPage(this);
                }
                return this.mUploadDocumentPage;
            }
        }
        #endregion
        
        #region Fields
        private UploadDocumentPage mUploadDocumentPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UploadDocumentPage : HtmlDocument
    {
        
        public UploadDocumentPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "True";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Upload Document";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/_layouts/Upload.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://sharepoint.preprod.fda.gov/_layouts/Upload.aspx?List=%7BE6CFE9AB%2D2F76%2D" +
                "4A52%2D9E74%2DECC54B9DDA69%7D&RootFolder=%2FShared%20Documents&Source=http%3A%2F" +
                "%2Fsharepoint%2Epreprod%2Efda%2Egov%2FShared%20Documents%2FForms%2FAllItems%2Eas" +
                "px&IsDlg=1";
            this.WindowTitles.Add("Shared Documents - All Documents");
            #endregion
        }
        
        #region Properties
        public HtmlFileInput NameFileInput
        {
            get
            {
                if ((this.mNameFileInput == null))
                {
                    this.mNameFileInput = new HtmlFileInput(this);
                    #region Search Criteria
                    this.mNameFileInput.SearchProperties[HtmlFileInput.PropertyNames.Id] = "ctl00_PlaceHolderMain_UploadDocumentSection_ctl03_InputFile";
                    this.mNameFileInput.SearchProperties[HtmlFileInput.PropertyNames.Name] = "ctl00$PlaceHolderMain$UploadDocumentSection$ctl03$InputFile";
                    this.mNameFileInput.FilterProperties[HtmlFileInput.PropertyNames.LabeledBy] = "Name:";
                    this.mNameFileInput.FilterProperties[HtmlFileInput.PropertyNames.Title] = null;
                    this.mNameFileInput.FilterProperties[HtmlFileInput.PropertyNames.Class] = "ms-fileinput";
                    this.mNameFileInput.FilterProperties[HtmlFileInput.PropertyNames.ControlDefinition] = "id=ctl00_PlaceHolderMain_UploadDocumentS";
                    this.mNameFileInput.FilterProperties[HtmlFileInput.PropertyNames.TagInstance] = "29";
                    this.mNameFileInput.WindowTitles.Add("Shared Documents - All Documents");
                    #endregion
                }
                return this.mNameFileInput;
            }
        }
        
        public HtmlInputButton OKButton
        {
            get
            {
                if ((this.mOKButton == null))
                {
                    this.mOKButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mOKButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_PlaceHolderMain_ctl03_RptControls_btnOK";
                    this.mOKButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$PlaceHolderMain$ctl03$RptControls$btnOK";
                    this.mOKButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "OK";
                    this.mOKButton.FilterProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mOKButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mOKButton.FilterProperties[HtmlButton.PropertyNames.Class] = "ms-ButtonHeightWidth";
                    this.mOKButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "accessKey=O id=ctl00_PlaceHolderMain_ctl";
                    this.mOKButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "33";
                    this.mOKButton.WindowTitles.Add("Shared Documents - All Documents");
                    #endregion
                }
                return this.mOKButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlFileInput mNameFileInput;
        
        private HtmlInputButton mOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UISharedDocumentsAllDoWindow : BrowserWindow
    {
        
        public UISharedDocumentsAllDoWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Shared Documents - All Documents";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Shared Documents - All Documents");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public HtmlDocument UISharedDocumentsAllDoDocument
        {
            get
            {
                if ((this.mUISharedDocumentsAllDoDocument == null))
                {
                    this.mUISharedDocumentsAllDoDocument = new HtmlDocument(this);
                    #region Search Criteria
                    this.mUISharedDocumentsAllDoDocument.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
                    this.mUISharedDocumentsAllDoDocument.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
                    this.mUISharedDocumentsAllDoDocument.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
                    this.mUISharedDocumentsAllDoDocument.FilterProperties[HtmlDocument.PropertyNames.Title] = "Shared Documents - All Documents";
                    this.mUISharedDocumentsAllDoDocument.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Shared%20Documents/Forms/AllItems.aspx";
                    this.mUISharedDocumentsAllDoDocument.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://sharepoint.preprod.fda.gov/Shared%20Documents/Forms/AllItems.aspx?InitialT" +
                        "abId=Ribbon%2EDocument&VisibilityContext=WSSTabPersistence";
                    this.mUISharedDocumentsAllDoDocument.WindowTitles.Add("Shared Documents - All Documents");
                    #endregion
                }
                return this.mUISharedDocumentsAllDoDocument;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDocument mUISharedDocumentsAllDoDocument;
        #endregion
    }
}
